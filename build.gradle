/*
 * Copyright 2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { setUrl('http://repo.spring.io/plugins-release') }
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.5.8.RELEASE'
        classpath 'io.spring.gradle:propdeps-plugin:0.0.9.RELEASE'
        classpath "io.spring.gradle:dependency-management-plugin:${springDependencyManagementVersion}"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
    }
}

configure(subprojects.findAll { !['spring-distributed-locks-example'].contains(it.name) }) {
    apply plugin: 'groovy'
    apply plugin: 'java'
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'maven-publish'

    version version
    group 'com.budjb'

    repositories {
        jcenter()
        mavenCentral()
    }

    dependencyManagement {
        imports { mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}") }
    }

    dependencies {
        compile 'org.springframework.boot:spring-boot-starter'

        testCompile 'org.spockframework:spock-core:1.1-groovy-2.4'
        testCompile 'cglib:cglib-nodep:3.2.6'
        testCompile 'org.objenesis:objenesis:2.6'
    }

    compileJava.dependsOn(processResources)

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}
